generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
  ALL
}

enum Period {
  SPRING
  SUMMER
  FALL
  WINTER
}

enum FriendInviteStatus {
  PENDING
  ACCEPTED
  DELETED
}

model Location {
  id        Int        @id @default(autoincrement())
  latitude  Decimal    @db.Decimal(65, 30)
  longitude Decimal    @db.Decimal(65, 30)
  placeId   String?    @unique @db.VarChar(200)
  bookmarks Bookmark[]
}

model Bookmark {
  id         Int       @id @default(autoincrement())
  content    String?   @db.VarChar(200)
  locationId Int
  userId     Int
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  deletedAt  DateTime? @db.Timestamp(0)

  location                      Location                        @relation(fields: [locationId], references: [id])
  user                          User                            @relation(fields: [userId], references: [id])
  BookmarkBookmarkCollectionMap BookmarkBookmarkCollectionMap[]
  articleBookmarkMap            ArticleBookmarkMap[]
}

model BookmarkBookmarkCollectionMap {
  id           Int                @id @default(autoincrement())
  collectionId Int
  bookmarkId   Int
  collection   BookmarkCollection @relation(fields: [collectionId], references: [id])
  bookmark     Bookmark           @relation(fields: [bookmarkId], references: [id])

  @@unique([collectionId, bookmarkId])
  @@index([collectionId], map: "BookmarksInCollection.fk_collectionId_idx")
  @@index([bookmarkId], map: "BookmarksInCollection.fk_bookmarkId_idx")
}

model BookmarkCollection {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(200)
  userId     Int
  visibility Visibility @default(PRIVATE)
  createdAt  DateTime   @default(now()) @db.Timestamp(0)
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamp(0)

  user                          User                            @relation(fields: [userId], references: [id])
  BookmarkBookmarkCollectionMap BookmarkBookmarkCollectionMap[]

  @@index([userId], map: "fk_BookmarkCollection_userId")
}

model User {
  id             Int      @id @default(autoincrement())
  nickname       String?
  provider       String
  providerId     String   @unique
  profileImageId Int?     @unique
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp(0)

  bookmarkCollections BookmarkCollection[]
  bookmark            Bookmark[]
  profileImage        ProfileImage?        @relation(fields: [profileImageId], references: [id])

  articles               Article[]
  pendingArticleRequests PendingArticleRequest[]
  attachments            Attachment[]
  ArticleVersionHistory  ArticleVersionHistory[]

  receivedFriendInvites  FriendInvite[]           @relation("friendReceivedInvites")
  sentFriendInvites      FriendInvite[]           @relation("userSentInvites")
  userFavoriteArticleMap UserFavoriteArticleMap[] @relation("user")
}

enum AttachmentType {
  ARTICLE
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  state     String   @db.VarChar(10)
  bucket    String   @db.VarChar(64)
  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @default(now()) @db.Timestamp(3)
  User      User?
}

model Attachment {
  id        Int            @id @default(autoincrement())
  state     String         @db.VarChar(10)
  bucket    String         @db.VarChar(64)
  type      AttachmentType
  articleID Int?
  userId    Int?
  createdAt DateTime       @default(now()) @db.Timestamp(3)
  updatedAt DateTime       @default(now()) @db.Timestamp(3)

  article Article? @relation(fields: [articleID], references: [id])
  User    User?    @relation(fields: [userId], references: [id])
}

model Article {
  id              Int     @id @default(autoincrement())
  title           String
  thumbnail       String?
  location        String?
  authorId        Int     @map("userId")
  springVersionID Int?
  summerVersionID Int?
  fallVersionID   Int?
  winterVersionID Int?

  deletedAt DateTime? @db.Timestamp(0)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  author                  User                     @relation(fields: [authorId], references: [id])
  pendingArticleRequests  PendingArticleRequest[]
  articleTagMap           ArticleTagMap[]
  articleBookmarkMap      ArticleBookmarkMap[]
  articleVersionHistories ArticleVersionHistory[]
  attachments             Attachment[]
  userFavoriteArticleMap  UserFavoriteArticleMap[] @relation("favoriteArticles")
}

model ArticleVersionHistory {
  id        Int      @id @default(autoincrement())
  articleId Int
  userId    Int
  period    Period
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@index([period], map: "fk_ArticleVersionHistory_period")
}

model PendingArticleRequest {
  id         Int       @id @default(autoincrement())
  articleId  Int
  period     Period
  content    String    @db.Text
  userId     Int
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  acceptedAt DateTime? @db.Timestamp(0)
  declinedAt DateTime? @db.Timestamp(0)

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@index([period], map: "fk_PendingArticleRequest_period")
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  articleTagMap ArticleTagMap[]

  @@index([name], map: "index_tag_name")
}

model ArticleTagMap {
  id        Int @id @default(autoincrement())
  articleId Int
  tagId     Int

  article Article @relation(fields: [articleId], references: [id])
  tag     tag     @relation(fields: [tagId], references: [id])
}

model ArticleBookmarkMap {
  id         Int    @id @default(autoincrement())
  period     Period
  articleId  Int
  bookmarkId Int

  bookmark  Bookmark @relation(fields: [bookmarkId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  Article   Article  @relation(fields: [articleId], references: [id])

  @@index([period], map: "fk_ArticleBookmarkMap_period")
}

model FriendInvite {
  id         Int                @id @default(autoincrement())
  userId     Int
  friendId   Int
  status     FriendInviteStatus @default(PENDING)
  deletedAt  DateTime?
  acceptedAt DateTime?
  createdAt  DateTime           @default(now()) @db.Timestamp(0)

  user   User @relation("userSentInvites", fields: [userId], references: [id], map: "userSentInvites")
  friend User @relation("friendReceivedInvites", fields: [friendId], references: [id], map: "friendReceivedInvites")

  @@unique([userId, friendId, status])
}

model UserFavoriteArticleMap {
  id        Int @id @default(autoincrement())
  userId    Int
  articleId Int

  user    User    @relation("user", fields: [userId], references: [id], map: "user")
  article Article @relation("favoriteArticles", fields: [articleId], references: [id], map: "favoriteArticles")

  @@unique([userId, articleId])
}
