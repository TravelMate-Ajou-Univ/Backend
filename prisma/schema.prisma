generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Visibility {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

enum Period {
  SPRING
  SUMMER
  FALL
  WINTER
}

model Location {
  id        Int   @id @default(autoincrement())
  latitude  Float
  longitude Float

  bookmarks Bookmark[]

  @@unique([latitude, longitude])
}

model Bookmark {
  id                    Int                     @id @default(autoincrement())
  content               String?                 @db.VarChar(200)
  locationId            Int
  bookmarksInCollection BookmarksInCollection[]
  createdAt             DateTime                @default(now()) @db.Timestamp(0)
  deletedAt             DateTime?               @db.Timestamp(0)
  location              Location                @relation(fields: [locationId], references: [id])
  articleBookmarkMap    ArticleBookmarkMap[]
}

model BookmarksInCollection {
  collectionId Int
  bookmarkId   Int
  collection   BookmarkCollection @relation(fields: [collectionId], references: [id])
  bookmark     Bookmark           @relation(fields: [bookmarkId], references: [id])

  @@id([collectionId, bookmarkId])
  @@index([collectionId], map: "BookmarksInCollection.fk_collectionId_idx")
  @@index([bookmarkId], map: "BookmarksInCollection.fk_bookmarkId_idx")
}

model BookmarkCollection {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(200)
  userId     Int
  visibility Visibility @default(PRIVATE)
  createdAt  DateTime   @default(now()) @db.Timestamp(0)
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamp(0)

  user                  User                    @relation(fields: [userId], references: [id])
  bookmarksInCollection BookmarksInCollection[]

  @@index([userId], map: "fk_BookmarkCollection_userId")
}

model User {
  id             Int      @id @default(autoincrement())
  nickname       String?
  provider       String
  providerId     String   @unique
  profileImageId Int?     @unique
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp(0)

  profileImage ProfileImage? @relation(fields: [profileImageId], references: [id])

  bookmarkCollections    BookmarkCollection[]
  articles               Article[]
  pendingArticleRequests PendingArticleRequest[]
  attachments            Attachment[]
}

enum AttachmentType {
  ARTICLE
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  state     String   @db.VarChar(10)
  bucket    String   @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(3)
  User      User?
}

model Attachment {
  id        Int            @id @default(autoincrement())
  state     String         @db.VarChar(10)
  bucket    String         @db.VarChar(64)
  type      AttachmentType
  articleID Int?
  userId    Int?
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime       @default(now()) @map("updated_at") @db.Timestamp(3)

  article Article? @relation(fields: [articleID], references: [id])
  User    User?    @relation(fields: [userId], references: [id])
}

model Article {
  id              Int    @id @default(autoincrement())
  title           String
  userId          Int
  springVersionID Int?
  summerVersionID Int?
  fallVersionID   Int?
  winterVersionID Int?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user                    User                    @relation(fields: [userId], references: [id])
  pendingArticleRequests  PendingArticleRequest[]
  articleTagMap           ArticleTagMap[]
  articleVersionHistories ArticleVersionHistory[]
  attachments             Attachment[]
}

model ArticleVersionHistory {
  id        Int      @id @default(autoincrement())
  articleId Int
  period    Period
  content   String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  article Article @relation(fields: [articleId], references: [id])

  @@index([period], map: "fk_ArticleVersionHistory_period")
}

model PendingArticleRequest {
  id        Int      @id @default(autoincrement())
  articleId Int
  period    Period
  content   String
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@index([period], map: "fk_PendingArticleRequest_period")
}

model tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  articleTagMap ArticleTagMap[]
}

model ArticleTagMap {
  id        Int @id @default(autoincrement())
  articleId Int
  tagId     Int

  article Article @relation(fields: [articleId], references: [id])
  tag     tag     @relation(fields: [tagId], references: [id])
}

model ArticleBookmarkMap {
  id         Int    @id @default(autoincrement())
  period     Period
  articleId  Int
  bookmarkId Int

  bookmark  Bookmark @relation(fields: [bookmarkId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  @@index([period], map: "fk_ArticleBookmarkMap_period")
}
